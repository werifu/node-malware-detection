from callgraph import Callgraph
import igraph as ig
import leidenalg
from func_info import FuncInfo
from typing import List

class IGGraph:
    def __init__(self, callgraph: Callgraph) -> None:
        self.callgraph = callgraph
        self.ig_graph = ig.Graph()

        reachable_idxs = callgraph.get_reachable_func_idxs()
        self.ig_graph.add_vertices(len(reachable_idxs))
        self.ig_graph.vs['idx'] = list(reachable_idxs)
        for edge in callgraph.fun2fun:
            if edge[0] in reachable_idxs and edge[1] in reachable_idxs:
                src = self.ig_graph.vs.find(idx=edge[0]).index
                dst = self.ig_graph.vs.find(idx=edge[1]).index
                self.ig_graph.add_edge(src, dst)
    

    def partition(self) -> List[List[FuncInfo]]:
        parts = leidenalg.find_partition(self.ig_graph, leidenalg.ModularityVertexPartition)
        res = []
        for cluster in parts:
          func_cluster = []
          for vertex_idx in cluster:
              func_idx = self.ig_graph.vs[vertex_idx]['idx']
              func_info: FuncInfo = self.callgraph.functions[func_idx]
              func_cluster.append(func_info)
          res.append(func_cluster)
        return res


    def plot(self, target: str):
        ig.plot(self.ig_graph, vertex_label=self.ig_graph.vs['idx'], target=target)
