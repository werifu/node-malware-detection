from callgraph import Callgraph
import igraph as ig
import leidenalg
from func_info import FuncInfo
from typing import List, Dict


class IGGraph:
    def __init__(self, callgraph: Callgraph) -> None:
        self.callgraph = callgraph
        self.ig_graph = ig.Graph(directed=True)

        reachable_idxs = callgraph.get_reachable_func_idxs()
        self.ig_graph.add_vertices(len(reachable_idxs))
        self.ig_graph.vs['idx'] = list(reachable_idxs)
        for edge in callgraph.fun2fun:
            if edge[0] in reachable_idxs and edge[1] in reachable_idxs:
                src = self.ig_graph.vs.find(idx=edge[0]).index
                dst = self.ig_graph.vs.find(idx=edge[1]).index
                self.ig_graph.add_edge(src, dst)

    def partition(self) -> List[List]:
        parts = leidenalg.find_partition(
            self.ig_graph, leidenalg.ModularityVertexPartition)
        res = []
        for cluster in parts:
            func_cluster = []
            for vertex_idx in cluster:
                func_idx = self.ig_graph.vs[vertex_idx]['idx']
                vertex_info = {}
                callee_func_idxs = [self.ig_graph.vs[i.target]['idx']
                                    for i in self.ig_graph.vs[vertex_idx].out_edges()]
                func_info: FuncInfo = self.callgraph.functions[func_idx]

                vertex_info['idx'] = func_idx
                vertex_info['def_site'] = func_info.def_site
                vertex_info['summary'] = func_info.summary
                vertex_info['filepath'] = func_info.filepath
                vertex_info['calls'] = [
                    call for callee_func_idx in callee_func_idxs for call in self.callgraph.get_calls_by_fun2fun(
                        func_idx, callee_func_idx)
                ]
                func_cluster.append(vertex_info)
            res.append(func_cluster)
        return res

    def plot(self, target: str):
        ig.plot(self.ig_graph,
                vertex_label=self.ig_graph.vs['idx'], target=target)
