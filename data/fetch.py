import requests
import json
from typing import List
import os
import tarfile
from dotenv import load_dotenv
import argparse

load_dotenv()
LIBRARIES_IO_API_KEY = os.environ.get(
    'LIBRARIES_IO_API_KEY')


def get_versions(package_info: dict) -> List[str]:
    versions = package_info['versions']
    return list(map(lambda version: version['number'], versions))


def download_version(package_name: str, version: str):
    url = f'https://registry.npmjs.org/{package_name}/-/{package_name}-{version}.tgz'
    print(f'downloading:{url}')
    response = requests.get(url)
    if response.status_code == 200:
        safe_write(
            f'./data/packages/{package_name}/{package_name}-{version}.tgz', response.content)
    else:
        print(f'failed to download {package_name}-{version}:{url}')

def download_versions(package_name: str, versions: List[str]):
    for version in versions:
        download_version(package_name, version)

def download_latest(package_name: str, versions: List[str]):
    version = versions[-1]
    download_version(package_name, version)

def unzip_package(package_name: str, version: str):
    package_path = f'./data/packages/{package_name}/{package_name}-{version}.tgz'
    if not os.path.exists(package_path):
        print(f'package not exists:{package_path}')
        return
    with tarfile.open(package_path) as tar:
        tar.extractall(
            f'./data/packages/{package_name}/{package_name}-{version}')

def main():
    page = 1
    url = f'https://libraries.io/api/search?order=desc&page={page}&platforms=npm&sort=rank&per_page=100&api_key={LIBRARIES_IO_API_KEY}'

    response = requests.get(url)
    packages = response.json()

    download_urls = [package['latest_download_url'] for package in packages]
    json.dump(download_urls, open('data.json', 'w'))


def safe_write(filepath: str, content) -> bool:
    os.makedirs(os.path.dirname(filepath), exist_ok=True)
    if not os.path.exists(filepath):
        with open(filepath, 'wb') as f:
            f.write(content)
        return True
    print(f'file exists:{filepath}, skip it.')
    return False


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Npm packages fetcher')
    parser.add_argument(
        '-p', '--package-name',
        help='Package name'
    )
    parser.add_argument(
        '-v', '--version',
        help='Package version'
    )

    args = parser.parse_args()

    if args.package_name is None:
        parser.error('package name is required')
    if args.version is None:
        parser.error('package version is required')
    
    download_version(args.package_name, args.version)
    unzip_package(args.package_name, args.version)

